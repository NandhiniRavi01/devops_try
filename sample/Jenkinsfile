
pipeline {
    agent any

    environment {
        IMAGE_TAG = "v9"
        LOCAL_REGISTRY = "gcr.io/white-welder-432609-t7"
        ARGOCD_SERVER = "https://35.196.239.185:8081" // Updated to include 'https://'
        GOOGLE_APPLICATION_CREDENTIALS = '/tmp/gcloud-key.json'
        
    }

    stages {
        stage('Checkout') {
            steps {
                git credentialsId: 'git-credential', 
                    url: 'https://github.com/NandhiniRavi01/devops_try',
                    branch: 'main'
            }
        }
       
        stage('Setup') {
            stage('Setup Google Cloud') {
            steps {
                script {
                    // Use the Jenkins credential to manage the Google Cloud key
                    withCredentials([file(credentialsId: 'gcloud-key', variable: 'GCLOUD_KEY_FILE')]) {
                        // Copy the credential file to a temporary location
                        sh 'cp $GCLOUD_KEY_FILE /tmp/gcloud-key.json'
                        
                        // Install and initialize Google Cloud SDK
                        sh '''
                        curl -sSL https://sdk.cloud.google.com | bash
                        source ~/.bashrc
                        gcloud auth activate-service-account --key-file=/tmp/gcloud-key.json
                        gcloud config set project your-gcp-project-id
                        '''
                    }
                }
            }
        }
        }

            

        stage('Build Docker') {
            steps {
                script {
                    sh '''
                    echo "Building Docker Image"
                    docker build -t ${LOCAL_REGISTRY}/python-app:${IMAGE_TAG} -f sample/Dockerfile .
                    '''
                }
            }
        }

        stage('Push Docker Image to Local Registry') {
            steps {
                script {
                    sh '''
                    echo "Pushing Docker Image to Local Registry"
                    docker push ${LOCAL_REGISTRY}/python-app:${IMAGE_TAG}
                    '''
                }
            }
        }

        stage('Deploy to Kubernetes using ArgoCD') {
            steps {
                script {
                    sh '''
                    echo "Authenticating with ArgoCD"
                    argocd login ${ARGOCD_SERVER} --username admin --password ncKin-XiDzlA9s9e --insecure

                    echo "Deploying to Kubernetes using ArgoCD"
                    argocd app sync argocd/sample
                    argocd app wait argocd/sample --timeout 300
                    '''
                }
            }
        }
    }
}
