
pipeline {
    agent any

    environment {
        IMAGE_TAG = "v9"
        LOCAL_REGISTRY = "gcr.io/white-welder-432609-t7"
        ARGOCD_SERVER = "https://35.196.239.185:8081" // Updated to include 'https://'
        GOOGLE_APPLICATION_CREDENTIALS = '/tmp/gcloud-key.json'
        
    }

    stages {
        stage('Checkout') {
            steps {
                git credentialsId: 'git-credential', 
                    url: 'https://github.com/NandhiniRavi01/devops_try',
                    branch: 'main'
            }
        }
       
        
            stage('Setup Google Cloud') {
    steps {
        script {
            withCredentials([file(credentialsId: 'google-credentials', variable: 'GCLOUD_KEY_FILE')]) {
                sh '''
                echo "GCLOUD_KEY_FILE is set to $GCLOUD_KEY_FILE"
                ls -l $GCLOUD_KEY_FILE

                echo "Checking /tmp permissions"
                ls -ld /tmp

                echo "Testing write access"
                touch /tmp/testfile
                rm /tmp/testfile

                echo "Copying Google Cloud key to /tmp"
                cp $GCLOUD_KEY_FILE /tmp/gcloud-key.json

                echo "Listing files in /tmp after copy"
                ls -l /tmp
                '''
            }
        }
    }
}

            

        stage('Build Docker') {
    steps {
        script {
            try {
                sh '''
                echo "Building Docker Image"
                docker build -t ${LOCAL_REGISTRY}/python-app:${IMAGE_TAG} -f sample/Dockerfile .
                '''
            } catch (Exception e) {
                error("Docker build failed: ${e.message}")
            }
        }
    }
}

        stage('Push Docker Image to Local Registry') {
            steps {
                script {
                    sh '''
                    echo "Pushing Docker Image to Local Registry"
                    docker push ${LOCAL_REGISTRY}/python-app:${IMAGE_TAG}
                    '''
                }
            }
        }

        stage('Deploy to Kubernetes using ArgoCD') {
            steps {
                script {
                    sh '''
                    echo "Authenticating with ArgoCD"
                    argocd login ${ARGOCD_SERVER} --username admin --password ncKin-XiDzlA9s9e --insecure

                    echo "Deploying to Kubernetes using ArgoCD"
                    argocd app sync argocd/sample
                    argocd app wait argocd/sample --timeout 300
                    '''
                }
            }
        }
    }
}
